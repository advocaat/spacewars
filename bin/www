#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('spacewars:server');
var http = require('http');
var DAO = require('../DAO');
var model = require('../model');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var io = require('socket.io')(server);

io.on('connection', function (socket) {

    // Save the game state
    socket.on("gamesave", function (obj) {

        console.log("Saving game state...");
        DAO.updateGameState(obj.playerName, obj.playerPosition, obj.enemyPositions, obj.playerCurrency, obj.playerMoves, obj.playerTime);

    });

    // Load the game state
    socket.on("restart", function (playerName) {

        console.log("Loading game state...");
        DAO.getGameState(playerName, function (gameState) {
            socket.emit("savedGame", gameState);
        });

    });

    // When the user wins, update their level and currency
    socket.on("levelUp", function (user) {

        console.log("Logged in user: " + JSON.stringify(user));
        DAO.updateUserLevel(user.user, 1);
        DAO.updateBank(user.user, 20);

    });

    // Update the leaderboard with a new high-score
    socket.on("highscore", function (score) {

        console.log("The player scored: " + score);
        DAO.updateLeaderboard(score);

    });

    // When a user purchases a new ship, add it to their account
    socket.on("newShip", function (data) {

        console.log("Ship purchased: " + data);
        DAO.insertUserShip(data);
        DAO.updateBank(data.user, -data.price);

    });

});


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
